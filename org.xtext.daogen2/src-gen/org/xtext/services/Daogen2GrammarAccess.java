/*
 * generated by Xtext 2.15.0
 */
package org.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class Daogen2GrammarAccess extends AbstractGrammarElementFinder {
	
	public class DaogenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Daogen2.Daogen");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsTypeParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Daogen:
		//	elements+=Type*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Type*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Type
		public RuleCall getElementsTypeParserRuleCall_0() { return cElementsTypeParserRuleCall_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Daogen2.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClasseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// ou voce declara um DATATYPE ou uma CLASS  
		//Type:
		//	DataType | Classe;
		@Override public ParserRule getRule() { return rule; }
		
		//DataType | Classe
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DataType
		public RuleCall getDataTypeParserRuleCall_0() { return cDataTypeParserRuleCall_0; }
		
		//Classe
		public RuleCall getClasseParserRuleCall_1() { return cClasseParserRuleCall_1; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Daogen2.DataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatatypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//DataType:
		//	'datatype' name=ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'datatype' name=ID ';'
		public Group getGroup() { return cGroup; }
		
		//'datatype'
		public Keyword getDatatypeKeyword_0() { return cDatatypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ClasseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Daogen2.Classe");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypeClasseCrossReference_2_1_0 = (CrossReference)cSuperTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypeClasseIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperTypeClasseCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeaturesFeatureParserRuleCall_4_0 = (RuleCall)cFeaturesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// estrutura CLASSE
		//Classe:
		//	'class' name=ID ('extends' superType=[Classe])? '{'
		//	features+=Feature*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'class' name=ID ('extends' superType=[Classe])? '{' features+=Feature* '}'
		public Group getGroup() { return cGroup; }
		
		//'class'
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('extends' superType=[Classe])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//superType=[Classe]
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }
		
		//[Classe]
		public CrossReference getSuperTypeClasseCrossReference_2_1_0() { return cSuperTypeClasseCrossReference_2_1_0; }
		
		//ID
		public RuleCall getSuperTypeClasseIDTerminalRuleCall_2_1_0_1() { return cSuperTypeClasseIDTerminalRuleCall_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//features+=Feature*
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }
		
		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_4_0() { return cFeaturesFeatureParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Daogen2.Feature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAtributoParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInsertCodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// dentro de uma classe ou voce declara um ATRIBUTO ou um INSERTCODE
		//Feature:
		//	Atributo | InsertCode;
		@Override public ParserRule getRule() { return rule; }
		
		//Atributo | InsertCode
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Atributo
		public RuleCall getAtributoParserRuleCall_0() { return cAtributoParserRuleCall_0; }
		
		//InsertCode
		public RuleCall getInsertCodeParserRuleCall_1() { return cInsertCodeParserRuleCall_1; }
	}
	public class AtributoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Daogen2.Atributo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrivateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeTypeCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Atributo:
		//	'private' type=[Type] name=ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'private' type=[Type] name=ID ';'
		public Group getGroup() { return cGroup; }
		
		//'private'
		public Keyword getPrivateKeyword_0() { return cPrivateKeyword_0; }
		
		//type=[Type]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[Type]
		public CrossReference getTypeTypeCrossReference_1_0() { return cTypeTypeCrossReference_1_0; }
		
		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_1_0_1() { return cTypeTypeIDTerminalRuleCall_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class InsertCodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Daogen2.InsertCode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInsertCodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParametroAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametroParametroParserRuleCall_2_0 = (RuleCall)cParametroAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//InsertCode:
		//	'insertCode' '(' parametro=Parametro ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'insertCode' '(' parametro=Parametro ')' ';'
		public Group getGroup() { return cGroup; }
		
		//'insertCode'
		public Keyword getInsertCodeKeyword_0() { return cInsertCodeKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//parametro=Parametro
		public Assignment getParametroAssignment_2() { return cParametroAssignment_2; }
		
		//Parametro
		public RuleCall getParametroParametroParserRuleCall_2_0() { return cParametroParametroParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ParametroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Daogen2.Parametro");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInserirObjetoParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBuscarObjetoParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cListarObjetoParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRemoverObjetoParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAtualizarObjetoParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDeletarTabelaParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//// PARAMETROS possiveis
		//Parametro:
		//	InserirObjeto | BuscarObjeto | ListarObjeto | RemoverObjeto | AtualizarObjeto | DeletarTabela;
		@Override public ParserRule getRule() { return rule; }
		
		//InserirObjeto | BuscarObjeto | ListarObjeto | RemoverObjeto | AtualizarObjeto | DeletarTabela
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InserirObjeto
		public RuleCall getInserirObjetoParserRuleCall_0() { return cInserirObjetoParserRuleCall_0; }
		
		//BuscarObjeto
		public RuleCall getBuscarObjetoParserRuleCall_1() { return cBuscarObjetoParserRuleCall_1; }
		
		//ListarObjeto
		public RuleCall getListarObjetoParserRuleCall_2() { return cListarObjetoParserRuleCall_2; }
		
		//RemoverObjeto
		public RuleCall getRemoverObjetoParserRuleCall_3() { return cRemoverObjetoParserRuleCall_3; }
		
		//AtualizarObjeto
		public RuleCall getAtualizarObjetoParserRuleCall_4() { return cAtualizarObjetoParserRuleCall_4; }
		
		//DeletarTabela
		public RuleCall getDeletarTabelaParserRuleCall_5() { return cDeletarTabelaParserRuleCall_5; }
	}
	public class InserirObjetoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Daogen2.InserirObjeto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInserirObjetoAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInserir_objetoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//InserirObjeto:
		//	{InserirObjeto}
		//	'inserir_objeto';
		@Override public ParserRule getRule() { return rule; }
		
		//{InserirObjeto} 'inserir_objeto'
		public Group getGroup() { return cGroup; }
		
		//{InserirObjeto}
		public Action getInserirObjetoAction_0() { return cInserirObjetoAction_0; }
		
		//'inserir_objeto'
		public Keyword getInserir_objetoKeyword_1() { return cInserir_objetoKeyword_1; }
	}
	public class BuscarObjetoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Daogen2.BuscarObjeto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBuscar_objetoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAtrAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cAtrAtributoCrossReference_1_0 = (CrossReference)cAtrAssignment_1.eContents().get(0);
		private final RuleCall cAtrAtributoIDTerminalRuleCall_1_0_1 = (RuleCall)cAtrAtributoCrossReference_1_0.eContents().get(1);
		
		//BuscarObjeto:
		//	'buscar_objeto,' atr=[Atributo];
		@Override public ParserRule getRule() { return rule; }
		
		//'buscar_objeto,' atr=[Atributo]
		public Group getGroup() { return cGroup; }
		
		//'buscar_objeto,'
		public Keyword getBuscar_objetoKeyword_0() { return cBuscar_objetoKeyword_0; }
		
		//atr=[Atributo]
		public Assignment getAtrAssignment_1() { return cAtrAssignment_1; }
		
		//[Atributo]
		public CrossReference getAtrAtributoCrossReference_1_0() { return cAtrAtributoCrossReference_1_0; }
		
		//ID
		public RuleCall getAtrAtributoIDTerminalRuleCall_1_0_1() { return cAtrAtributoIDTerminalRuleCall_1_0_1; }
	}
	public class ListarObjetoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Daogen2.ListarObjeto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListarObjetoAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cListar_objetoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ListarObjeto:
		//	{ListarObjeto}
		//	'listar_objeto';
		@Override public ParserRule getRule() { return rule; }
		
		//{ListarObjeto} 'listar_objeto'
		public Group getGroup() { return cGroup; }
		
		//{ListarObjeto}
		public Action getListarObjetoAction_0() { return cListarObjetoAction_0; }
		
		//'listar_objeto'
		public Keyword getListar_objetoKeyword_1() { return cListar_objetoKeyword_1; }
	}
	public class RemoverObjetoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Daogen2.RemoverObjeto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemover_objetoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAtrAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cAtrAtributoCrossReference_1_0 = (CrossReference)cAtrAssignment_1.eContents().get(0);
		private final RuleCall cAtrAtributoIDTerminalRuleCall_1_0_1 = (RuleCall)cAtrAtributoCrossReference_1_0.eContents().get(1);
		
		//RemoverObjeto:
		//	'remover_objeto,' atr=[Atributo];
		@Override public ParserRule getRule() { return rule; }
		
		//'remover_objeto,' atr=[Atributo]
		public Group getGroup() { return cGroup; }
		
		//'remover_objeto,'
		public Keyword getRemover_objetoKeyword_0() { return cRemover_objetoKeyword_0; }
		
		//atr=[Atributo]
		public Assignment getAtrAssignment_1() { return cAtrAssignment_1; }
		
		//[Atributo]
		public CrossReference getAtrAtributoCrossReference_1_0() { return cAtrAtributoCrossReference_1_0; }
		
		//ID
		public RuleCall getAtrAtributoIDTerminalRuleCall_1_0_1() { return cAtrAtributoIDTerminalRuleCall_1_0_1; }
	}
	public class AtualizarObjetoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Daogen2.AtualizarObjeto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAtualizar_objetoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAtrAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cAtrAtributoCrossReference_1_0 = (CrossReference)cAtrAssignment_1.eContents().get(0);
		private final RuleCall cAtrAtributoIDTerminalRuleCall_1_0_1 = (RuleCall)cAtrAtributoCrossReference_1_0.eContents().get(1);
		
		//AtualizarObjeto:
		//	'atualizar_objeto,' atr=[Atributo];
		@Override public ParserRule getRule() { return rule; }
		
		//'atualizar_objeto,' atr=[Atributo]
		public Group getGroup() { return cGroup; }
		
		//'atualizar_objeto,'
		public Keyword getAtualizar_objetoKeyword_0() { return cAtualizar_objetoKeyword_0; }
		
		//atr=[Atributo]
		public Assignment getAtrAssignment_1() { return cAtrAssignment_1; }
		
		//[Atributo]
		public CrossReference getAtrAtributoCrossReference_1_0() { return cAtrAtributoCrossReference_1_0; }
		
		//ID
		public RuleCall getAtrAtributoIDTerminalRuleCall_1_0_1() { return cAtrAtributoIDTerminalRuleCall_1_0_1; }
	}
	public class DeletarTabelaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Daogen2.DeletarTabela");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeletarTabelaAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDeletar_tabelaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//DeletarTabela:
		//	{DeletarTabela}
		//	'deletar_tabela';
		@Override public ParserRule getRule() { return rule; }
		
		//{DeletarTabela} 'deletar_tabela'
		public Group getGroup() { return cGroup; }
		
		//{DeletarTabela}
		public Action getDeletarTabelaAction_0() { return cDeletarTabelaAction_0; }
		
		//'deletar_tabela'
		public Keyword getDeletar_tabelaKeyword_1() { return cDeletar_tabelaKeyword_1; }
	}
	
	
	private final DaogenElements pDaogen;
	private final TypeElements pType;
	private final DataTypeElements pDataType;
	private final ClasseElements pClasse;
	private final FeatureElements pFeature;
	private final AtributoElements pAtributo;
	private final InsertCodeElements pInsertCode;
	private final ParametroElements pParametro;
	private final InserirObjetoElements pInserirObjeto;
	private final BuscarObjetoElements pBuscarObjeto;
	private final ListarObjetoElements pListarObjeto;
	private final RemoverObjetoElements pRemoverObjeto;
	private final AtualizarObjetoElements pAtualizarObjeto;
	private final DeletarTabelaElements pDeletarTabela;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public Daogen2GrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDaogen = new DaogenElements();
		this.pType = new TypeElements();
		this.pDataType = new DataTypeElements();
		this.pClasse = new ClasseElements();
		this.pFeature = new FeatureElements();
		this.pAtributo = new AtributoElements();
		this.pInsertCode = new InsertCodeElements();
		this.pParametro = new ParametroElements();
		this.pInserirObjeto = new InserirObjetoElements();
		this.pBuscarObjeto = new BuscarObjetoElements();
		this.pListarObjeto = new ListarObjetoElements();
		this.pRemoverObjeto = new RemoverObjetoElements();
		this.pAtualizarObjeto = new AtualizarObjetoElements();
		this.pDeletarTabela = new DeletarTabelaElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.Daogen2".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Daogen:
	//	elements+=Type*;
	public DaogenElements getDaogenAccess() {
		return pDaogen;
	}
	
	public ParserRule getDaogenRule() {
		return getDaogenAccess().getRule();
	}
	
	//// ou voce declara um DATATYPE ou uma CLASS  
	//Type:
	//	DataType | Classe;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//DataType:
	//	'datatype' name=ID ';';
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//// estrutura CLASSE
	//Classe:
	//	'class' name=ID ('extends' superType=[Classe])? '{'
	//	features+=Feature*
	//	'}';
	public ClasseElements getClasseAccess() {
		return pClasse;
	}
	
	public ParserRule getClasseRule() {
		return getClasseAccess().getRule();
	}
	
	//// dentro de uma classe ou voce declara um ATRIBUTO ou um INSERTCODE
	//Feature:
	//	Atributo | InsertCode;
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}
	
	//Atributo:
	//	'private' type=[Type] name=ID ';';
	public AtributoElements getAtributoAccess() {
		return pAtributo;
	}
	
	public ParserRule getAtributoRule() {
		return getAtributoAccess().getRule();
	}
	
	//InsertCode:
	//	'insertCode' '(' parametro=Parametro ')' ';';
	public InsertCodeElements getInsertCodeAccess() {
		return pInsertCode;
	}
	
	public ParserRule getInsertCodeRule() {
		return getInsertCodeAccess().getRule();
	}
	
	//// PARAMETROS possiveis
	//Parametro:
	//	InserirObjeto | BuscarObjeto | ListarObjeto | RemoverObjeto | AtualizarObjeto | DeletarTabela;
	public ParametroElements getParametroAccess() {
		return pParametro;
	}
	
	public ParserRule getParametroRule() {
		return getParametroAccess().getRule();
	}
	
	//InserirObjeto:
	//	{InserirObjeto}
	//	'inserir_objeto';
	public InserirObjetoElements getInserirObjetoAccess() {
		return pInserirObjeto;
	}
	
	public ParserRule getInserirObjetoRule() {
		return getInserirObjetoAccess().getRule();
	}
	
	//BuscarObjeto:
	//	'buscar_objeto,' atr=[Atributo];
	public BuscarObjetoElements getBuscarObjetoAccess() {
		return pBuscarObjeto;
	}
	
	public ParserRule getBuscarObjetoRule() {
		return getBuscarObjetoAccess().getRule();
	}
	
	//ListarObjeto:
	//	{ListarObjeto}
	//	'listar_objeto';
	public ListarObjetoElements getListarObjetoAccess() {
		return pListarObjeto;
	}
	
	public ParserRule getListarObjetoRule() {
		return getListarObjetoAccess().getRule();
	}
	
	//RemoverObjeto:
	//	'remover_objeto,' atr=[Atributo];
	public RemoverObjetoElements getRemoverObjetoAccess() {
		return pRemoverObjeto;
	}
	
	public ParserRule getRemoverObjetoRule() {
		return getRemoverObjetoAccess().getRule();
	}
	
	//AtualizarObjeto:
	//	'atualizar_objeto,' atr=[Atributo];
	public AtualizarObjetoElements getAtualizarObjetoAccess() {
		return pAtualizarObjeto;
	}
	
	public ParserRule getAtualizarObjetoRule() {
		return getAtualizarObjetoAccess().getRule();
	}
	
	//DeletarTabela:
	//	{DeletarTabela}
	//	'deletar_tabela';
	public DeletarTabelaElements getDeletarTabelaAccess() {
		return pDeletarTabela;
	}
	
	public ParserRule getDeletarTabelaRule() {
		return getDeletarTabelaAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
