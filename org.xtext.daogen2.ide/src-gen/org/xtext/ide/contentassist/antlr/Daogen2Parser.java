/*
 * generated by Xtext 2.15.0
 */
package org.xtext.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.ide.contentassist.antlr.internal.InternalDaogen2Parser;
import org.xtext.services.Daogen2GrammarAccess;

public class Daogen2Parser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(Daogen2GrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, Daogen2GrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getFeatureAccess().getAlternatives(), "rule__Feature__Alternatives");
			builder.put(grammarAccess.getParametroAccess().getAlternatives(), "rule__Parametro__Alternatives");
			builder.put(grammarAccess.getDataTypeAccess().getGroup(), "rule__DataType__Group__0");
			builder.put(grammarAccess.getClasseAccess().getGroup(), "rule__Classe__Group__0");
			builder.put(grammarAccess.getClasseAccess().getGroup_2(), "rule__Classe__Group_2__0");
			builder.put(grammarAccess.getAtributoAccess().getGroup(), "rule__Atributo__Group__0");
			builder.put(grammarAccess.getInsertCodeAccess().getGroup(), "rule__InsertCode__Group__0");
			builder.put(grammarAccess.getInserirObjetoAccess().getGroup(), "rule__InserirObjeto__Group__0");
			builder.put(grammarAccess.getBuscarObjetoAccess().getGroup(), "rule__BuscarObjeto__Group__0");
			builder.put(grammarAccess.getListarObjetoAccess().getGroup(), "rule__ListarObjeto__Group__0");
			builder.put(grammarAccess.getRemoverObjetoAccess().getGroup(), "rule__RemoverObjeto__Group__0");
			builder.put(grammarAccess.getAtualizarObjetoAccess().getGroup(), "rule__AtualizarObjeto__Group__0");
			builder.put(grammarAccess.getDeletarTabelaAccess().getGroup(), "rule__DeletarTabela__Group__0");
			builder.put(grammarAccess.getDaogenAccess().getElementsAssignment(), "rule__Daogen__ElementsAssignment");
			builder.put(grammarAccess.getDataTypeAccess().getNameAssignment_1(), "rule__DataType__NameAssignment_1");
			builder.put(grammarAccess.getClasseAccess().getNameAssignment_1(), "rule__Classe__NameAssignment_1");
			builder.put(grammarAccess.getClasseAccess().getSuperTypeAssignment_2_1(), "rule__Classe__SuperTypeAssignment_2_1");
			builder.put(grammarAccess.getClasseAccess().getFeaturesAssignment_4(), "rule__Classe__FeaturesAssignment_4");
			builder.put(grammarAccess.getAtributoAccess().getTypeAssignment_1(), "rule__Atributo__TypeAssignment_1");
			builder.put(grammarAccess.getAtributoAccess().getNameAssignment_2(), "rule__Atributo__NameAssignment_2");
			builder.put(grammarAccess.getInsertCodeAccess().getParametroAssignment_2(), "rule__InsertCode__ParametroAssignment_2");
			builder.put(grammarAccess.getBuscarObjetoAccess().getAtrAssignment_1(), "rule__BuscarObjeto__AtrAssignment_1");
			builder.put(grammarAccess.getRemoverObjetoAccess().getAtrAssignment_1(), "rule__RemoverObjeto__AtrAssignment_1");
			builder.put(grammarAccess.getAtualizarObjetoAccess().getAtrAssignment_1(), "rule__AtualizarObjeto__AtrAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private Daogen2GrammarAccess grammarAccess;

	@Override
	protected InternalDaogen2Parser createParser() {
		InternalDaogen2Parser result = new InternalDaogen2Parser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public Daogen2GrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(Daogen2GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
